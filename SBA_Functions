unit SBA_Functions;

interface
         function ElementInArray(const element: string ; const A: TStringArray): Boolean;
         function CharacterInWord(const Character: char ; word: string): Boolean;
         function CountSyllables(const writing: string): integer;
         function CountWords(const writing: TStringArray): integer;
         function CountCommas(const writing: TStringArray ; const n_words: integer): integer;
         function WordExtraction(const writing: String): TStringArray;
         function WordExist(const A: TStringArray): TStringArray;
         function WordFrequency(const text , words : TStringArray): DynamicArray;
         function LargestIndex(const A: DynamicArray): DynamicArray ;
         function BinarySearch(const A: string; const B: TStringArray): Boolean ;
         function Formal(const text: TStringArray): DynamicArray ;
         function Spelling(const text: TStringArray; const Dictionary : TStringArray): DynamicArray ;

uses
  Classes, SysUtils;

implementation
function ElementInArray(const element: string ; const A: TStringArray): Boolean;

  var
     i : integer;
     return : boolean;

  begin
     i := 0;
     return := false;
     while (i <= High(A)) and (not return) do
     begin
          if element = A[i] then
          begin
            return := true;
          end;
          i := i + 1;
     end;

     ElementInArray := return;
  end;


function CharacterInWord(const Character: char ; word: string): Boolean;
var
   i : integer;
   flag : boolean;

begin
   flag := false;
   i := 0;
   while (i <= Length(word)) and (not flag) do
   begin
        if Character = word[i] then
          flag := true;

        i := i + 1;
   end;

   CharacterInWord := flag;
end;


function CountSyllables(const writing: string): integer;
var
   i, len, Syllables: integer;
   vowels: TStringArray;
   lastvowel: boolean;

begin
   vowels := ['a','e','i','o','u','y','A','E','I','O','U','Y'];
   len := Length(writing);
   Syllables := 0;
   lastvowel := false;

   for i := 0 to len-1 do
   begin
        if ElementInArray(writing[i], vowels) then
        begin
          if lastvowel = false then
          begin
            Syllables := Syllables + 1;
            lastvowel := true;
          end;
        end
        else
            lastvowel := false;
    end;
    CountSyllables := Syllables ;
end;


function CountWords(const writing: TStringArray): integer;
var
   word: string;
   words: integer;

begin
   words := 0;

   for word in writing do
   begin
        words := words + 1;
   end;

   CountWords := words;
end;


function CountSentences(const writing: TStringArray ; const n_words: integer): integer;
var
   end_mark : String ;
   sentences ,i ,len : integer;
   last_char : char ;

begin
   sentences := 0;
   end_mark := '.!?';
   len := 0;

   for i := 0 to n_words - 1 do
   begin
        len := High(writing[i]);
        last_char := writing[i][len];
        if CharacterInWord(last_char , end_mark) then
        begin
          sentences := sentences + 1;
        end;
   end;

   CountSentences := sentences;
end;


function CountCommas(const writing: TStringArray ; const n_words: integer): integer;

var
   i , n_comma , len: integer ;


begin
   n_comma := 0;
   for i := 0 to n_words - 1 do
   begin
        len := Length(writing[i]);
        if writing[i][len] = ',' then
        begin
          n_comma := n_comma + 1;
        end;
   end;

   CountCommas := n_comma;
end;


function WordExtraction(const writing: String): TStringArray;
var
   i, len : integer;
   mark , temp: TStringArray;

begin
   temp := writing.split(' ');
   mark := ['.',',','!','?','''','"','(',')',':',';','/'];

   for i := 0 to high(temp) do
   begin
        len := High(temp[i]);
        setLength(temp[i] , len);
        if (Ord(temp[i][1]) >= 97) and (Ord(temp[i][1]) <= 122) then
        begin
          temp[i][1] := Chr(Ord(temp[i][1]) - 32);
        end;

        if ElementInArray(temp[i][len] , mark) then
        begin
          temp[i] := Copy(temp[i] , 1 , len - 1);
        end;
   end;

   WordExtraction := temp;
end;


function WordExist(const A: TStringArray): TStringArray;
var
   B: TStringArray;
   i: integer;

begin
   SetLength(B,0);
   for i := 0 to high(A) do
   begin
       if not ElementInArray(A[i] , B) then
       begin
         SetLength(B, Length(B)+1);
         B[Length(B)-1] := A[i];
       end;
   end;

   WordExist := B;
end;


function WordFrequency(const text , words : TStringArray): DynamicArray;
var
   FC : DynamicArray ;
   i, j : integer;

begin
   SetLength(FC,high(words)+1);
   for i := 0 to high(words) do
   begin
       for j := 0 to high(text) do
       begin
           if words[i] = text[j] then
           begin
             FC[i] :=  FC[i] + 1 ;
           end;
       end;
   end;

   WordFrequency := FC;
end;


function LargestIndex(const A: DynamicArray): DynamicArray ;

var
   FC : DynamicArray ;
   i, temp, index1, index2, index3: integer;

begin
   index1 := 0;
   index2 := 1;
   index3 := 2;

   if A[index3] > A[index2] then
   begin
     temp := index2;
     index2 := index3;
     index3 := temp;
   end;
   if A[index2] > A[index1] then
   begin
     temp := index1;
     index1 := index2;
     index2 := temp;
   end;

   for i := 3 to High(A) do
   begin
       if A[i] > A[index1] then
       begin
         index3 := index2;
         index2 := index1;
         index1 := i;
       end
       else if A[i] > A[index2] then
       begin
         index3 := index2;
         index2 := i;
       end
       else if A[i] > A[index3] then
       begin
         index3 := i;
       end;
   end;

   SetLength(FC , 3);
   FC[0] := index1;
   FC[1] := index2;
   FC[2] := index3;

   LargestIndex := FC;
end;


function BinarySearch(const A: string; const B: TStringArray): Boolean ;
var
   left , mid , right : integer;
   flag : Boolean;

begin
   left := 0;
   right := high(B);
   flag := False;

   while (flag = False) and (left <= right) do
   begin
        mid := (left + right) div 2;
       if A = B[mid] then
       begin
         flag := True
       end
       else if A < B[mid] then
       begin
         right := mid - 1;
       end
       else
       begin
           left := mid + 1;
       end;
   end;

   BinarySearch := flag;
end;


function Formal(const text: TStringArray): DynamicArray ;
var
   Informal : DynamicArray;
   InformalWords : TStringArray ;
   i , len : integer;

begin
   InformalWords := ['will','can','wanna','gonna','gotta','kinda','sorta','dunno','cuz','lemme','gimme','crappy','dude','yikes','fella','hey','cool','awesome','chill','freaking','bro','crazy','super','yup','yep','btw','idk','thx','omg','yo','yeah','Will','Can','Wanna','Gonna','Gotta','Kinda','Sorta','Dunno','Cuz','Lemme','Gimme','Crappy','Dude','Fella','Hey','Cool','Awesome','Chill','Freaking','Bro','Crazy','Super','Yup','Yep','OMG','BTW','IDK','Thx','Yo','Yeah'];
   len := Length(text);
   SetLength(Informal
   ,0);
   for i := 0 to len - 1 do
   begin
       if ElementInArray(text[i],InformalWords) or CharacterInWord('''' , text[i]) then
       begin
         SetLength(Informal,Length(Informal)+1);
         Informal[Length(Informal)-1] := i;
       end;
   end;

   Formal := Informal ;
end;


function Spelling(const text: TStringArray; const Dictionary : TStringArray): DynamicArray ;
var
   SpellingMistakes : DynamicArray;
   i , len , len2 : integer;

begin
   len := High(text);
   SetLength(SpellingMistakes , 0);

   for i := 0 to len do
   begin
       if not BinarySearch(text[i] , Dictionary) then
       begin
            len2 := Length(SpellingMistakes);
            SetLength(SpellingMistakes , len2 + 1);
            SpellingMistakes[len2] := i;
       end;
   end;

   Spelling := SpellingMistakes;
end;

end.
