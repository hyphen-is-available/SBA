program SBA ;

uses
  Classes, SysUtils, unit1;

type
  DynamicArray = array of integer;


const
  W_FNAME = 'Passage.txt'; {Text File from Users}
  D_FNAME = 'Vocabulary.txt'; {Text File of Dictionary}
  I_FNAME = 'Informal_Words.txt'; {Text File of List of Informal Words}

var
   org_text , text , words , org_compare , dictionary , informalwords : TStringArray ;
   FC , Top3 , Informal , Misspelled : DynamicArray ;
   writing , mode , tone , s: string ;
   compare : string ;
   writing_file , dictionary_file , informal_file: TextFile;
   i , j , k , n_words , n_sentences , n_syllables , n_commas : integer ;
   n_cwords , n_csentences , n_csyllables , n_ccommas : integer ;
   avg_w , avg_s , avg_c , readability , grade : real;
   avg_cw , avg_cs , avg_cc , c_readability , c_grade: real;
   flag1 , flag2 : Boolean;

begin
  writeln('==== EWA ( English Writing Analyzer ) ====');
  writeln('======= Reading your Passage Text File =======');
  AssignFile(writing_file , W_FNAME);
  Reset(writing_file);
  writing := '';

  while not eof(writing_file) do
  begin
       Readln(writing_file, s);
       writing := writing + s;
  end;
  CloseFile(writing_file);
  writeln();
  { Reading the text file }

  writeln('Your Writing is :');
  writeln(writing);
  writeln();
  { Returning the Original Passage }

  writeln('Which function are you trying to use ? Statistics or Reminders ?');
  readln(mode);
  writeln();
  { Asking for which Mode user's are trying to Use }

  org_text := writing.Split(' ');
  text := WordExtraction(writing);

  if mode = 'Statistics' then  { STATISTICS FUNCTION }
  begin
    n_syllables := CountSyllables(writing);

    n_words := length(org_text);
    writeln('NUMBER OF WORDS : ' , n_words );
    writeln(n_syllables);

    n_sentences := CountSentences(org_text, n_words);
    writeln('NUMBER OF SENTENCES : ' , n_sentences );
    writeln();
    { Calculation on the Basic Statistics }

    avg_w := n_words / n_sentences ;
    writeln('AVERAGE LENGTH OF SENTENCES : ' , avg_w:0:2 , ' WORDS');
    if avg_w < 10 then
       writeln('Too Short! Your passage maybe TOO CHOPPY!')
    else if avg_w > 25 then
    begin
       flag1 := TRUE;
       writeln('Too Long! Your passage maybe TOO COMPLEX and Readers may LOSE their ATTENTION!');
    end
    else
    begin
       flag1 := FALSE;
       writeln('Perfect length of sentence!');
    end;
    writeln();
    { Calculation and Comments on Average Words per Sentences }

    n_commas := CountCommas(org_text, n_words);
    avg_c := n_commas / n_sentences ;
    writeln('AVERAGE COMMA PER SENTENCES : ' , avg_c:0:2 , ' COMMAS');
    if avg_c > 3 then
    begin
       flag2 := TRUE;
       writeln('Too much COMMAS! Be careful of the RUN-ON Sentences!')
    end
    else if avg_c > 2 then
    begin
       flag2 := FALSE;
       writeln('Be careful of the overuse of commas!');
    end;
    writeln();
    { Calculation and Comments on Average Commas per Sentences }

    avg_s := n_syllables / n_words ;
    readability := 206.835 - 1.015*avg_w - 84.6*avg_s ;
    writeln('Flesch-Kincaid Readability : ' , readability:0:2 , '/100') ;
    grade := 0.39*avg_w + 11.8*avg_s - 15.59;
    writeln('Flesch-Kincaid Grade Level : ' , grade:0:2);
    { Calculation on Readability and Grade Level }

    if grade <= 6 then
    begin
       write('BASIC : ');
       if grade <= 3 then
       begin
          writeln('Similar as ABC BOOKS')
       end
       else
       begin
          writeln('Similar as GRIMM','"','s FAIRY STORIES')
       end
    end
    else if grade <= 12 then
    begin
       write('AVERAGE : ');
       if grade <= 9 then
       begin
          writeln('Similar as HARRY POTTER')
       end
       else
       begin
          writeln('Similar as JURASSIC PARK');
       end
    end
    else
    begin
       write('SKILLED : ');
       if grade <= 15 then
       begin
         writeln('Similar as A BRIEF HISTORY OF TIME by Steven Hawking')
       end
       else
       begin
          writeln('Similar as an ACADEMIC PAPER')
       end
    end;
    writeln();
    { Comments and Famous Book Example of Similar Grade Level }

    words := WordExist(text);
    FC := WordFrequency(text , words);
    Top3 := LargestIndex(FC);
    writeln('TOP3 MOST FREQUENTLY USED WORDS :');
    writeln('1) ' , words[Top3[0]] , ' ' , FC[Top3[0]]);
    writeln('2) ' , words[Top3[1]] , ' ' , FC[Top3[1]]);
    writeln('3) ' , words[Top3[2]] , ' ' , FC[Top3[2]]);
    writeln();
    writeln();
    { The Calculation on TOP3 Most frequently used words }

    if flag1 and flag2 then
    begin
       writeln('Suggestions:');
       writeln('Your Passage is too COMPLEX and DIFFICULT to Understand!');
       writeln('Try to reduce the number of words of each sentences.');
       writeln('Remember, SHORT Sentence is better!');
       writeln();
       writeln();
    end;
    { Overall Comments and Suggestions about the Passage }

    writeln('If you want to compare your passage with another passage, Please enter that passage here:');
    writeln('(If no , just simply type "NO")');
    readln(compare);
    writeln();

    if compare <> 'NO' then { Simple Comparing with other passage }
    begin
         org_compare := compare.Split(' ');

         n_csyllables := CountSyllables(compare);
         n_cwords := Length(org_compare);
         n_csentences := CountSentences(org_compare, n_cwords);
         n_ccommas := CountCommas(org_compare, n_cwords);
         avg_cw := n_cwords / n_csentences ;
         avg_cs := n_csyllables / n_cwords ;
         avg_cc := n_ccommas / n_csentences ;
         c_readability := 206.835 - 1.015*avg_cw - 84.6*avg_cs ;
         c_grade := 0.39*avg_cw + 11.8*avg_cs - 15.59 ;
         writeln('NUMBER OF WORDS: ' , n_cwords);
         writeln('NUMBER OF SENTENCES: ', n_csentences );
         writeln('AVERAGE LENGTH OF SENTENCES: ' , avg_cw:0:2 , ' WORDS');
         writeln('AVERAGE COMMAS PER SENTENCES: ', n_ccommas );
         writeln();
         writeln('Flesch-Kincaide Readaibility of the passage : ' , c_readability:0:2 , '/100');
         writeln('Flesch-Kincaid Grade Level of the passage : ', c_grade:0:2);
         { Calculation on the Basic Statistics }

         if readability > c_readability then
         begin
              writeln('Your Passage has a high readability of ' , readability - c_readability );
         end
         else
         begin
              writeln('The Passage has a higher readability of ' , (c_readability - readability):0:2 );
         end;
         { Comparison on the Basic Statistics }

    end;
  end

  else if mode = 'Reminders' then { REMINDERS FUNCTION }
  begin
    writeln('Please be awared that :');
    writeln('1) "##word##" means this word may has spelling mistakes ');
    writeln('2) "$$word$$" means this word may has writing tone mistakes');
    writeln();

    writeln('What is your tone of writing ? Formal or Informal ?');
    readln(tone);
    writeln();
    { Reading the Writing Tone to Determine what Kind of Mistakes need to be marked }

    AssignFile(dictionary_file , D_FNAME);
    Reset(dictionary_file);
    i := 0;
    while not eof(dictionary_file) do
    begin
         readln(dictionary_file, s);
         i := i + 1;
         SetLength(dictionary, i);
         dictionary[i-1] := s;
    end;
    CloseFile(dictionary_file);
    { Reading the Dictinoary File }

    Misspelled := Spelling(text,dictionary);

    { returning the passage with mistakes mark }
    if tone = 'Formal' then { Both Writing Tone Mistakes and Spelling Mistakes need to be marked }
    begin
      AssignFile(informal_file , I_FNAME);
      Reset(informal_file);
      i := 0;
      while not eof(informal_file) do
      begin
         readln(informal_file, s);
         i := i + 1;
         SetLength(informalwords, i);
         informalwords[i-1] := s;
      end;
      CloseFile(informal_file);
      { Reading the Informal Words File }

      Informal := Formal(text,informalwords);
      j := 0;
      k := 0;

      if (Length(Informal) > 0) and (Length(Misspelled) > 0) then
      begin
         for i := 0 to High(org_text) do
         begin
              if i = Informal[j] then
              begin
                   write('$$' , org_text[Informal[j]] ,'$$ ');
                   j := j + 1;
              end

              else if i = Misspelled[k] then
              begin
                   write('##' , org_text[Misspelled[k]] , '## ');
                   k := k + 1;
              end

              else if (i <> Informal[j]) and (i <> Misspelled[k]) then
              begin
                   write(org_text[i] , ' ');
              end;
         end;
      end
      { Case when both Writing Tone Mistakes and Spelling Mistakes are detected }

      else if (Length(Informal) = 0) and (Length(Misspelled) > 0) then
      begin
        for i := 0 to High(org_text) do
        begin
            if i = Misspelled[k] then
            begin
              write('##' , org_text[Misspelled[k]] , '## ');
              k := k + 1;
            end

            else if i <> Misspelled[k] then
            begin
              write(org_text[i] , ' ');
            end;
        end;
        writeln();
        writeln();
        writeln('No Writing Tone Mistakes Detected! Great Job!');
      end
      { Case when No Writing Tone Mistakes are Detected }

      else if (Length(Informal) > 0) and (Length(Misspelled) = 0) then
      begin
        for i := 0 to High(org_text) do
        begin
            if i = Informal[j] then
            begin
              write('$$' , org_text[Informal[j]] , '$$ ');
              j := j + 1;
            end

            else if i <> Informal[j] then
            begin
              write(org_text[i] , ' ');
            end;
        end;
        writeln();
        writeln();
        writeln('No Spelling Mistakes Detected! Great Job!');
      end
      { Case when No Spelling Mistakes are Detected }

      else if (Length(Informal) = 0) and (Length(Misspelled) = 0) then
      begin
        for i := 0 to High(org_text) do
        begin
            write(org_text[i] , ' ');
        end;
        writeln();
        writeln();
        writeln('No Spelling Mistakes nor Writing Tone Mistakes Detected! Excellent Job!');
      end;
      { Case when Neither Writing Tone Mistakes nor Spelling Mistakes are Detected }
    end

    else if tone = 'Informal' then { Only Spelling Mistakes need to be marked }
    begin
      k := 0;

      if Length(Misspelled) > 0 then
      begin
           for i := 0 to High(org_text) do
           begin
                if i = Misspelled[k] then
                begin
                     write('##' , org_text[Misspelled[k]] , '## ');
                     k := k + 1;
                end

                else if (i <> Misspelled[k]) then
                begin
                     write(org_text[i] , ' ');
                end;
           end;
      end
      { Case when Spelling Mistakes are Detected }

      else if Length(Misspelled) = 0 then
      begin
        for i := 0 to High(org_text) do
        begin
            write(org_text[i] , ' ');
        end;

        writeln();
        writeln();
        writeln('No Spelling Mistakes Detected ! Great Job !');
      end;
      { Case when No Spelling Mistakes are Detected }

    end;

  end;
  writeln();
  writeln();
  writeln('Thank you for using EWA! Welcome back anytime!');
  readln();


end. 
