program SBA ;

uses
  {$IFDEF UNIX}
  cthreads,
  {$ENDIF}
  Classes,
  { you can add units after this }
  SysUtils ;

type
  DynamicArray = array of integer;


function CountSyllables(writing: string): integer;
var
   i, len, Syllables: integer;
   vowels: set of char;
   lastvowel: boolean;

begin
   vowels := ['a','e','i','o','u','y','A','E','I','O','U','Y'];
   len := Length(writing);
   Syllables := 0;
   lastvowel := false;

   for i := 0 to len-1 do
   begin
        if CharInSet(writing[i], vowels) then
        begin
          if lastvowel = false then
          begin
            Syllables := Syllables + 1;
            lastvowel := true;
          end;
        end
        else
         lastvowel := false;
    end;
    CountSyllables := Syllables ;
end;


function CountWords(writing: string): integer;
var
   A: TStringArray;
   word: string;
   words: integer;

begin
   words := 0;
   A := writing.Split(' ');

   for word in A do
   begin
        words := words + 1;
   end;

   CountWords := words;
end;


function CountSentences(writing: string): integer;
var
   A: TStringArray;
   sentence: string;
   sentences: integer;

begin
   sentences := -1;
   A := writing.Split('.');

   for sentence in A do
   begin
        sentences := sentences + 1;
   end;

   CountSentences := sentences;
end;


function ElementInArray(element: string ; A: TStringArray): Boolean;

var
   i , j : integer;
   return : boolean;

begin
   i := 0;
   return := false;
   while (i <= High(A)) and (not return) do
   begin
        if element = A[i] then
        begin
          return := true;
        end;
        i := i + 1;
   end;

   ElementInArray := return;
end;


function WordExtraction(writing: string): TStringArray;
var
   A: TStringArray;
   word: string;
   i, len : integer;

begin
   A := writing.split(' ');

   for i := 0 to high(A) do
   begin
        len := Length(A[i]);
        setLength(A[i] , len);
        if (Ord(A[i][1]) >= 97) and (Ord(A[i][1]) <= 122) then
        begin
          A[i][1] := Chr(Ord(A[i][1]) - 32);
        end;

        if A[i][len] = '.' then
        begin
          A[i] := Copy(A[i] , 1 , len - 1);
        end;
   end;

   WordExtraction := A;
end;


function WordExist(A: TStringArray): TStringArray;
var
   B: TStringArray;
   i: integer;

begin
   SetLength(B,0);
   for i := 0 to high(A) do
   begin
       if not ElementInArray(A[i] , B) then
       begin
         SetLength(B, Length(B)+1);
         B[Length(B)-1] := A[i];
       end;
   end;

   WordExist := B;
end;


function WordFrequency(text , words : TStringArray): DynamicArray;
var
   FC : DynamicArray ;
   word: string;
   i, j, len : integer;

begin
   SetLength(FC,high(words)+1);
   for i := 0 to high(words) do
   begin
       for j := 0 to high(text) do
       begin
           if words[i] = text[j] then
           begin
             FC[i] :=  FC[i] + 1 ;
           end;
       end;
   end;

   WordFrequency := FC;
end;


function LargestIndex(A: DynamicArray): DynamicArray ;
var
   FC : DynamicArray ;
   i, temp, index1, index2, index3: integer;

begin
   index1 := 0;
   index2 := 1;
   index3 := 2;

   if A[index3] > A[index2] then
   begin
     temp := index2;
     index2 := index3;
     index3 := temp;
   end;
   if A[index2] > A[index1] then
   begin
     temp := index1;
     index1 := index2;
     index2 := temp;
   end;

   for i := 3 to High(A) do
   begin
       if A[i] > A[index1] then
       begin
         index3 := index2;
         index2 := index1;
         index1 := i;
       end
       else if A[i] > A[index2] then
       begin
         index3 := index2;
         index2 := i;
       end
       else if A[i] > A[index3] then
       begin
         index3 := i;
       end;
   end;

   SetLength(FC , 3);
   FC[0] := index1;
   FC[1] := index2;
   FC[2] := index3;

   LargestIndex := FC;
end;



var
   text , words : TStringArray ;
   FC , Top3 : DynamicArray ;
   writing , mode , tone , word : string ;
   n_words , n_sentences , n_syllables: integer ;
   avg_w , avg_s , readability : real;

begin
  writeln('Enter you writing here :');
  readln(writing);
  writeln();

  writeln('Which function are you trying to use ? Statistics or Reminders ?');
  readln(mode);

  if mode = 'Statistics' then
  begin
    writeln();

    n_syllables := CountSyllables(writing);

    n_words := CountWords(writing);
    writeln('NUMBER OF WORDS : ' , n_words );

    n_sentences := CountSentences(writing);
    writeln('NUMBER OF SENTENCES : ' , n_sentences );

    avg_w := n_words / n_sentences ;
    writeln('AVERAGE LENGTH OF SENTENCES : ' , avg_w:0:2 , ' WORDS');
    writeln();

    avg_s := n_syllables / n_words ;
    readability := 206.835 - 1.015*avg_w - 84.6*avg_s ;
    writeln('Readability (Flesch-Kincaid Readability Tests) : ' , readability:0:2 , '/100') ;
    writeln();

    text := WordExtraction(writing);
    words := WordExist(text);
    FC := WordFrequency(text , words);
    Top3 := LargestIndex(FC);
    writeln('TOP3 FREQUENTLY USED WORDS :');
    writeln('1) ' , words[Top3[0]] , ' ' , FC[Top3[0]]);
    writeln('2) ' , words[Top3[1]] , ' ' , FC[Top3[1]]);
    writeln('3) ' , words[Top3[2]] , ' ' , FC[Top3[2]]);

    readln();

  end
  else if mode = 'Reminders' then
  begin
    writeln();
    writeln('What is your tone of writing ? Formal or Informal ?');
    readln(tone);

  end;

end.

  readln();

end.        
